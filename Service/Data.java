/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-13")
public class Data implements org.apache.thrift.TBase<Data, Data._Fields>, java.io.Serializable, Cloneable, Comparable<Data> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_MODIFIED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifiedDate", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CREATED_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("createdDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BUFFER_FIELD_DESC = new org.apache.thrift.protocol.TField("buffer", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DataTupleSchemeFactory());
  }

  public String name; // optional
  public long size; // optional
  public long lastModifiedDate; // required
  public long createdDate; // required
  public ByteBuffer buffer; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    SIZE((short)2, "size"),
    LAST_MODIFIED_DATE((short)3, "lastModifiedDate"),
    CREATED_DATE((short)4, "createdDate"),
    BUFFER((short)5, "buffer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // SIZE
          return SIZE;
        case 3: // LAST_MODIFIED_DATE
          return LAST_MODIFIED_DATE;
        case 4: // CREATED_DATE
          return CREATED_DATE;
        case 5: // BUFFER
          return BUFFER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZE_ISSET_ID = 0;
  private static final int __LASTMODIFIEDDATE_ISSET_ID = 1;
  private static final int __CREATEDDATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NAME,_Fields.SIZE,_Fields.BUFFER};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFIED_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastModifiedDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATED_DATE, new org.apache.thrift.meta_data.FieldMetaData("createdDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUFFER, new org.apache.thrift.meta_data.FieldMetaData("buffer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data.class, metaDataMap);
  }

  public Data() {
  }

  public Data(
    long lastModifiedDate,
    long createdDate)
  {
    this();
    this.lastModifiedDate = lastModifiedDate;
    setLastModifiedDateIsSet(true);
    this.createdDate = createdDate;
    setCreatedDateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data(Data other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.size = other.size;
    this.lastModifiedDate = other.lastModifiedDate;
    this.createdDate = other.createdDate;
    if (other.isSetBuffer()) {
      this.buffer = org.apache.thrift.TBaseHelper.copyBinary(other.buffer);
    }
  }

  public Data deepCopy() {
    return new Data(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setSizeIsSet(false);
    this.size = 0;
    setLastModifiedDateIsSet(false);
    this.lastModifiedDate = 0;
    setCreatedDateIsSet(false);
    this.createdDate = 0;
    this.buffer = null;
  }

  public String getName() {
    return this.name;
  }

  public Data setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public long getSize() {
    return this.size;
  }

  public Data setSize(long size) {
    this.size = size;
    setSizeIsSet(true);
    return this;
  }

  public void unsetSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
  }

  public void setSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
  }

  public long getLastModifiedDate() {
    return this.lastModifiedDate;
  }

  public Data setLastModifiedDate(long lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    setLastModifiedDateIsSet(true);
    return this;
  }

  public void unsetLastModifiedDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFIEDDATE_ISSET_ID);
  }

  /** Returns true if field lastModifiedDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifiedDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFIEDDATE_ISSET_ID);
  }

  public void setLastModifiedDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFIEDDATE_ISSET_ID, value);
  }

  public long getCreatedDate() {
    return this.createdDate;
  }

  public Data setCreatedDate(long createdDate) {
    this.createdDate = createdDate;
    setCreatedDateIsSet(true);
    return this;
  }

  public void unsetCreatedDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATEDDATE_ISSET_ID);
  }

  /** Returns true if field createdDate is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATEDDATE_ISSET_ID);
  }

  public void setCreatedDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATEDDATE_ISSET_ID, value);
  }

  public byte[] getBuffer() {
    setBuffer(org.apache.thrift.TBaseHelper.rightSize(buffer));
    return buffer == null ? null : buffer.array();
  }

  public ByteBuffer bufferForBuffer() {
    return org.apache.thrift.TBaseHelper.copyBinary(buffer);
  }

  public Data setBuffer(byte[] buffer) {
    this.buffer = buffer == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(buffer, buffer.length));
    return this;
  }

  public Data setBuffer(ByteBuffer buffer) {
    this.buffer = org.apache.thrift.TBaseHelper.copyBinary(buffer);
    return this;
  }

  public void unsetBuffer() {
    this.buffer = null;
  }

  /** Returns true if field buffer is set (has been assigned a value) and false otherwise */
  public boolean isSetBuffer() {
    return this.buffer != null;
  }

  public void setBufferIsSet(boolean value) {
    if (!value) {
      this.buffer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SIZE:
      if (value == null) {
        unsetSize();
      } else {
        setSize((Long)value);
      }
      break;

    case LAST_MODIFIED_DATE:
      if (value == null) {
        unsetLastModifiedDate();
      } else {
        setLastModifiedDate((Long)value);
      }
      break;

    case CREATED_DATE:
      if (value == null) {
        unsetCreatedDate();
      } else {
        setCreatedDate((Long)value);
      }
      break;

    case BUFFER:
      if (value == null) {
        unsetBuffer();
      } else {
        setBuffer((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case SIZE:
      return getSize();

    case LAST_MODIFIED_DATE:
      return getLastModifiedDate();

    case CREATED_DATE:
      return getCreatedDate();

    case BUFFER:
      return getBuffer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case SIZE:
      return isSetSize();
    case LAST_MODIFIED_DATE:
      return isSetLastModifiedDate();
    case CREATED_DATE:
      return isSetCreatedDate();
    case BUFFER:
      return isSetBuffer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Data)
      return this.equals((Data)that);
    return false;
  }

  public boolean equals(Data that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_size = true && this.isSetSize();
    boolean that_present_size = true && that.isSetSize();
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_lastModifiedDate = true;
    boolean that_present_lastModifiedDate = true;
    if (this_present_lastModifiedDate || that_present_lastModifiedDate) {
      if (!(this_present_lastModifiedDate && that_present_lastModifiedDate))
        return false;
      if (this.lastModifiedDate != that.lastModifiedDate)
        return false;
    }

    boolean this_present_createdDate = true;
    boolean that_present_createdDate = true;
    if (this_present_createdDate || that_present_createdDate) {
      if (!(this_present_createdDate && that_present_createdDate))
        return false;
      if (this.createdDate != that.createdDate)
        return false;
    }

    boolean this_present_buffer = true && this.isSetBuffer();
    boolean that_present_buffer = true && that.isSetBuffer();
    if (this_present_buffer || that_present_buffer) {
      if (!(this_present_buffer && that_present_buffer))
        return false;
      if (!this.buffer.equals(that.buffer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_size = true && (isSetSize());
    list.add(present_size);
    if (present_size)
      list.add(size);

    boolean present_lastModifiedDate = true;
    list.add(present_lastModifiedDate);
    if (present_lastModifiedDate)
      list.add(lastModifiedDate);

    boolean present_createdDate = true;
    list.add(present_createdDate);
    if (present_createdDate)
      list.add(createdDate);

    boolean present_buffer = true && (isSetBuffer());
    list.add(present_buffer);
    if (present_buffer)
      list.add(buffer);

    return list.hashCode();
  }

  @Override
  public int compareTo(Data other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifiedDate()).compareTo(other.isSetLastModifiedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifiedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifiedDate, other.lastModifiedDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreatedDate()).compareTo(other.isSetCreatedDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createdDate, other.createdDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBuffer()).compareTo(other.isSetBuffer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuffer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buffer, other.buffer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Data(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetSize()) {
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("lastModifiedDate:");
    sb.append(this.lastModifiedDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdDate:");
    sb.append(this.createdDate);
    first = false;
    if (isSetBuffer()) {
      if (!first) sb.append(", ");
      sb.append("buffer:");
      if (this.buffer == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.buffer, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'lastModifiedDate' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'createdDate' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DataStandardSchemeFactory implements SchemeFactory {
    public DataStandardScheme getScheme() {
      return new DataStandardScheme();
    }
  }

  private static class DataStandardScheme extends StandardScheme<Data> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.size = iprot.readI64();
              struct.setSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_MODIFIED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifiedDate = iprot.readI64();
              struct.setLastModifiedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATED_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createdDate = iprot.readI64();
              struct.setCreatedDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BUFFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.buffer = iprot.readBinary();
              struct.setBufferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLastModifiedDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastModifiedDate' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCreatedDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'createdDate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSize()) {
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI64(struct.size);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_MODIFIED_DATE_FIELD_DESC);
      oprot.writeI64(struct.lastModifiedDate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATED_DATE_FIELD_DESC);
      oprot.writeI64(struct.createdDate);
      oprot.writeFieldEnd();
      if (struct.buffer != null) {
        if (struct.isSetBuffer()) {
          oprot.writeFieldBegin(BUFFER_FIELD_DESC);
          oprot.writeBinary(struct.buffer);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DataTupleSchemeFactory implements SchemeFactory {
    public DataTupleScheme getScheme() {
      return new DataTupleScheme();
    }
  }

  private static class DataTupleScheme extends TupleScheme<Data> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.lastModifiedDate);
      oprot.writeI64(struct.createdDate);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetSize()) {
        optionals.set(1);
      }
      if (struct.isSetBuffer()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetSize()) {
        oprot.writeI64(struct.size);
      }
      if (struct.isSetBuffer()) {
        oprot.writeBinary(struct.buffer);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lastModifiedDate = iprot.readI64();
      struct.setLastModifiedDateIsSet(true);
      struct.createdDate = iprot.readI64();
      struct.setCreatedDateIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.size = iprot.readI64();
        struct.setSizeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.buffer = iprot.readBinary();
        struct.setBufferIsSet(true);
      }
    }
  }

}

